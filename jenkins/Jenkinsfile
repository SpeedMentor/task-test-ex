pipeline {
    agent any

    environment {
        HUAWEI_ACCESS_KEY = credentials('HUAWEI_ACCESS_KEY')
        HUAWEI_SECRET_KEY = credentials('HUAWEI_SECRET_KEY')
        HUAWEI_REGION = 'tr-west-1'
        FRONTEND_IMAGE = "swr.${HUAWEI_REGION}.myhuaweicloud.com/cce/frontend:latest"
        BACKEND_IMAGE = "swr.${HUAWEI_REGION}.myhuaweicloud.com/cce/backend:latest"
        KUBE_CONFIG = credentials('KUBE_CONFIG')
        KUBE_CLUSTER_NAME = 'cce-tf-test-cluster'
        DOCKER_USER = credentials('DOCKER_USER')
        DOCKER_PW = credentials('DOCKER_PW')
    }

    stages {

        stage('Checkout') {
            steps {
                script {
                    sh '''
                        if [ -d .git ]; then
                            echo "Repository exists, pulling latest changes..."
                            git reset --hard
                            git clean -fd
                            git pull origin main
                        else
                            echo "Repository not found, cloning..."
                            git clone https://github.com/your-username/your-repo.git .
                            git checkout main
                        fi
                    '''
                }
            }
        }

        stage('Deploy Database Redis') {
            steps {
                script {
                    sh 'kubectl apply -f kubernetes/redis-deployment.yaml'
                    sh 'kubectl apply -f kubernetes/redis-service.yaml'
                }
            }
        }

        stage('Install Dependencies & Lint') {
            parallel {
                stage('Frontend') {
                    steps {
                        dir('frontend') {
                            sh 'npm install --legacy-peer-deps --force'
                            sh 'npm run lint || true'
                        }
                    }
                }
                stage('Backend') {
                    steps {
                        dir('backend') {
                            sh 'npm install --legacy-peer-deps --force'
                            sh 'npm run lint || true'
                        }
                    }
                }
            }
        }

        stage('Build & Test') {
            parallel {
                stage('Frontend Build & Test') {
                    steps {
                        dir('frontend') {
                            sh 'npm run build'
                            sh 'npm run test:unit'
                        }
                    }
                }
                stage('Backend Test') {
                    steps {
                        dir('backend') {
                            sh 'npm run test'
                        }
                    }
                }
            }
        }

        stage('Build & Push Docker Images') {
            steps {
                script {
                    sh 'docker login -u tr-west-1@ZN5PYY1PVNVW5RSSE48R -p ${DOCKER_PW} swr.tr-west-1.myhuaweicloud.com'
                    parallel (
                        "Frontend Image": {
                            dir('frontend') {
                                sh 'docker build -t ${FRONTEND_IMAGE} -f Dockerfile .'
                                sh 'docker push ${FRONTEND_IMAGE}'
                            }
                        },
                        "Backend Image": {
                            dir('backend') {
                                sh 'docker build -t ${BACKEND_IMAGE} -f Dockerfile .'
                                sh 'docker push ${BACKEND_IMAGE}'
                            }
                        }
                    )
                }
            }
        }

        stage('Deploy to Kubernetes') {
            steps {
                script {
                    withCredentials([file(credentialsId: 'KUBE_CONFIG', variable: 'KUBECONFIG')]) {
                        env.KUBECONFIG = "${KUBECONFIG}"

                        sh '''
                            echo "KUBECONFIG file path: ${KUBECONFIG}"
                            echo "KUBECONFIG file content:"
                            cat ${KUBECONFIG}
                        '''

                        sh '''
                            kubectl --kubeconfig=${KUBECONFIG} config view
                        '''

                        sh '''
                            kubectl apply -f kubernetes/
                        '''
                    }
                }
            }
        }
    }

    post {
        success {
            echo '✅ Pipeline completed successfully!'
        }
        failure {
            echo '❌ Pipeline failed!'
        }
    }
}
